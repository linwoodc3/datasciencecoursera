# Joining train and test sets to create X and y sets
X <- bind_rows(X_train,X_test)
y <- bind_rows(y_test,y_train)
# Combining the X and y data to one single dataframe
dat <- bind_cols(X,y, subject)
# Send notification to console
print(paste0("The data merge (Task1) is complete. Proceeding.... "))
###############################################################################
# Task 2, Extract only the measurements on the mean and standard deviation
###############################################################################
# we get the expected outcome in one elegant line of code
meanstddat <- bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)])
# but here are the individual steps
grep("std",features$V2); # Used to pattern match feature with "std" in the string name
grep("mean",features$V2); # Used to pattern match feature with "mean" in the string name
dat[grep("std",features$V2)]; # Used to subset the combined data set to pull out only std measurements
dat[grep("mean",features$V2)]; # Used to subset the combined data set to pull out only mean measurements
bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)]); # Use bind_cols from dplyr to join the datasets
# Send notification to console
print(paste0("Measurements for mean and std have been extracted (Task2). Proceeding.... "))
###############################################################################
# Task 3, Use descriptive activity names to name the activities in the data set
###############################################################################
# Add description of activities to the data set
y <- mutate( y, action = ifelse(y$V1 ==1,"WALKING",ifelse(y$V1 ==2,"WALKING_UPSTAIRS",ifelse(y$V1==3,"WALKING_DOWNSTAIRS",ifelse(y$V1==4,"SITTING",ifelse(y$V1 ==5,"STANDING",ifelse(y$V1 == y,"LAYING")))))))
colnames(y[2]) <- "activity"
descriptivedat <- bind_cols(meanstddat,y[2],subject$V1)
descriptivedat$action <- tolower(descriptivedat$action)
descriptivedat <- bind_cols(meanstddat,y[2],subject[,2])
descriptivedat$action <- tolower(descriptivedat$action)
descriptivedat <- bind_cols(meanstddat,y[2])
descriptivedat$action <- tolower(descriptivedat$action)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
rm(list=ls())
###############################################################################
# Information
###############################################################################
# Created by Linwood Creekmore III
# Started Dec 2015
# For Johns Hopkins University Data Scinece Certification track; Getting and Cleaning Data
# Github = https://github.com/linwoodc3
#### Code. ####
###############################################################################
# Check for required packages and load
###############################################################################
list.of.packages <- c("dplyr", "tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(tidyr)
###############################################################################
# Looking for locations of files
###############################################################################
if (!file.exists('data')) {
dir.create('data')}
if (!file.exists('./data/files')) {
dir.create('./data/files')}
# help for codebook http://biostats.ucdavis.edu/SampleCodeBook.php
###############################################################################
# Download the zip file
###############################################################################
# downloading the raw zip file and saving as a temporary file or, just passing step if file exists
temp <- tempfile()
if (!file.exists('./data/files/UCI HAR Dataset')) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
unzip(temp,exdir = './data/files')
print(paste0("You did not have the file; download complete. Proceeding.... "))
} else {
print(paste0("You have the target zip file. Proceeding.... "))
}
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
#unzip(temp,exdir = './data/files')
###############################################################################
# Task 1, Downloading and Merging the test and train data sets
###############################################################################
#downloading the training sets
X_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/X_train.txt')))
y_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/y_train.txt')))
subject_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/subject_train.txt')))
#downloading the test sets
y_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/y_test.txt')))
X_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/X_test.txt')))
subject_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/subject_test.txt')))
#downloading the feature names
features = data.frame(read.table('./data/files/UCI HAR Dataset/features.txt'))
#this removes the temporary file
rm('temp')
# Combining the subjects data set
subject = bind_rows(subject_train,subject_test)
# Joining train and test sets to create X and y sets
X <- bind_rows(X_train,X_test)
y <- bind_rows(y_test,y_train)
# Combining the X and y data to one single dataframe
dat <- bind_cols(X,y, subject)
# Send notification to console
print(paste0("The data merge (Task1) is complete. Proceeding.... "))
###############################################################################
# Task 2, Extract only the measurements on the mean and standard deviation
###############################################################################
# we get the expected outcome in one elegant line of code
meanstddat <- bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)])
# but here are the individual steps
grep("std",features$V2); # Used to pattern match feature with "std" in the string name
grep("mean",features$V2); # Used to pattern match feature with "mean" in the string name
dat[grep("std",features$V2)]; # Used to subset the combined data set to pull out only std measurements
dat[grep("mean",features$V2)]; # Used to subset the combined data set to pull out only mean measurements
bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)]); # Use bind_cols from dplyr to join the datasets
# Send notification to console
print(paste0("Measurements for mean and std have been extracted (Task2). Proceeding.... "))
###############################################################################
# Task 3, Use descriptive activity names to name the activities in the data set
###############################################################################
# Add description of activities to the data set
y <- mutate( y, action = ifelse(y$V1 ==1,"WALKING",ifelse(y$V1 ==2,"WALKING_UPSTAIRS",ifelse(y$V1==3,"WALKING_DOWNSTAIRS",ifelse(y$V1==4,"SITTING",ifelse(y$V1 ==5,"STANDING",ifelse(y$V1 == y,"LAYING")))))))
colnames(y[2]) <- "activity"
descriptivedat <- bind_cols(meanstddat,y[2])
descriptivedat$action <- tolower(descriptivedat$action)
# Send notification to console
print(paste0("Descriptive activity names were appeneded to the dataframe (Task 3). Proceeding.... "))
###############################################################################
# Task 4, Appropriately labels the data set with descriptive variable names.
###############################################################################
# From the steps above, we get the indexes of the subsetted "std" measurements
g <- grep("std",features$V2); # This gives us a 33 by 2 dataframe using "dim"; 1:33 is our target range to apply column names
# Let's do a quick check to see if we are matching indexes correctly, we want to get 33 in the end
# We will extract the variable names, strip the "V", convert to numeric, and then "intersect" to see if all match
names(descriptivedat[1:33]); # this extracts variable names with indexes that match "std" subset indexes from features
gsub("V","",names(descriptivedat[1:33])); # this strips the "V" from the names; we have character class
f <- as.numeric(gsub("V","",names(descriptivedat[1:33]))); # this converts characters to numeric data class
length(intersect(f,g)); # This should match the length of g above, if so, we can now add the column names
if (length(g)==length(f)) {
test <- descriptivedat[1:33]
names(test) <- tolower(features[grep("std",features$V2),][,2])
} else {
warning("The dimensions of the indexes do not match up")
}
# Now we do the same for the "mean" measurements
g <- grep("mean",features$V2); # This gives us a by 2 dataframe using "dim"; 1:33 is our target range to apply column names
names(descriptivedat[34:79]); # this extracts variable names with indexes that match "std" subset indexes from features
gsub("V","",names(descriptivedat[34:79])); # this strips the "V" from the names; we have character class
f <- as.numeric(gsub("V","",names(descriptivedat[34:79]))); # this converts characters to numeric data class
length(intersect(f,g)); # This should match the length of g above, if so, we can now add the column names
if (length(g)==length(f)) {
test2 <- descriptivedat[34:79]
names(test2) <- tolower(features[grep("mean",features$V2),][,2])
} else {
warning("The dimensions of the indexes do not match up")
}
# combine the newly renamed columns and placeholder files
descriptivedat <- bind_cols(test,test2,descriptivedat$action)
descriptivedatfinal <- bind_cols(test,test2,descriptivedat$action,subject[,2])
descriptivedatfinal <- bind_cols(test,test2)
descriptivedatfinal <- bind_cols(test,test2,descriptivedat["action"],subject[,2])
###############################################################################
# Information
###############################################################################
# Created by Linwood Creekmore III
# Started Dec 2015
# For Johns Hopkins University Data Scinece Certification track; Getting and Cleaning Data
# Github = https://github.com/linwoodc3
#### Code. ####
###############################################################################
# Check for required packages and load
###############################################################################
list.of.packages <- c("dplyr", "tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(tidyr)
###############################################################################
# Looking for locations of files
###############################################################################
if (!file.exists('data')) {
dir.create('data')}
if (!file.exists('./data/files')) {
dir.create('./data/files')}
# help for codebook http://biostats.ucdavis.edu/SampleCodeBook.php
###############################################################################
# Download the zip file
###############################################################################
# downloading the raw zip file and saving as a temporary file or, just passing step if file exists
temp <- tempfile()
if (!file.exists('./data/files/UCI HAR Dataset')) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
unzip(temp,exdir = './data/files')
print(paste0("You did not have the file; download complete. Proceeding.... "))
} else {
print(paste0("You have the target zip file. Proceeding.... "))
}
#download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
#unzip(temp,exdir = './data/files')
###############################################################################
# Task 1, Downloading and Merging the test and train data sets
###############################################################################
#downloading the training sets
X_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/X_train.txt')))
y_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/y_train.txt')))
subject_train = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/train/subject_train.txt')))
#downloading the test sets
y_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/y_test.txt')))
X_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/X_test.txt')))
subject_test = tbl_df(data.frame(read.table('./data/files/UCI HAR Dataset/test/subject_test.txt')))
#downloading the feature names
features = data.frame(read.table('./data/files/UCI HAR Dataset/features.txt'))
#this removes the temporary file
rm('temp')
# Combining the subjects data set
subject = bind_rows(subject_train,subject_test)
# Joining train and test sets to create X and y sets
X <- bind_rows(X_train,X_test)
y <- bind_rows(y_test,y_train)
# Combining the X and y data to one single dataframe
dat <- bind_cols(X,y, subject)
# Send notification to console
print(paste0("The data merge (Task1) is complete. Proceeding.... "))
###############################################################################
# Task 2, Extract only the measurements on the mean and standard deviation
###############################################################################
# we get the expected outcome in one elegant line of code
meanstddat <- bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)])
# but here are the individual steps
grep("std",features$V2); # Used to pattern match feature with "std" in the string name
grep("mean",features$V2); # Used to pattern match feature with "mean" in the string name
dat[grep("std",features$V2)]; # Used to subset the combined data set to pull out only std measurements
dat[grep("mean",features$V2)]; # Used to subset the combined data set to pull out only mean measurements
bind_cols(dat[grep("std",features$V2)],dat[grep("mean",features$V2)]); # Use bind_cols from dplyr to join the datasets
# Send notification to console
print(paste0("Measurements for mean and std have been extracted (Task2). Proceeding.... "))
###############################################################################
# Task 3, Use descriptive activity names to name the activities in the data set
###############################################################################
# Add description of activities to the data set
y <- mutate( y, action = ifelse(y$V1 ==1,"WALKING",ifelse(y$V1 ==2,"WALKING_UPSTAIRS",ifelse(y$V1==3,"WALKING_DOWNSTAIRS",ifelse(y$V1==4,"SITTING",ifelse(y$V1 ==5,"STANDING",ifelse(y$V1 == y,"LAYING")))))))
colnames(y[2]) <- "activity"
descriptivedat <- bind_cols(meanstddat,y[2])
descriptivedat$action <- tolower(descriptivedat$action)
# Send notification to console
print(paste0("Descriptive activity names were appeneded to the dataframe (Task 3). Proceeding.... "))
###############################################################################
# Task 4, Appropriately labels the data set with descriptive variable names.
###############################################################################
# From the steps above, we get the indexes of the subsetted "std" measurements
g <- grep("std",features$V2); # This gives us a 33 by 2 dataframe using "dim"; 1:33 is our target range to apply column names
# Let's do a quick check to see if we are matching indexes correctly, we want to get 33 in the end
# We will extract the variable names, strip the "V", convert to numeric, and then "intersect" to see if all match
names(descriptivedat[1:33]); # this extracts variable names with indexes that match "std" subset indexes from features
gsub("V","",names(descriptivedat[1:33])); # this strips the "V" from the names; we have character class
f <- as.numeric(gsub("V","",names(descriptivedat[1:33]))); # this converts characters to numeric data class
length(intersect(f,g)); # This should match the length of g above, if so, we can now add the column names
if (length(g)==length(f)) {
test <- descriptivedat[1:33]
names(test) <- tolower(features[grep("std",features$V2),][,2])
} else {
warning("The dimensions of the indexes do not match up")
}
# Now we do the same for the "mean" measurements
g <- grep("mean",features$V2); # This gives us a by 2 dataframe using "dim"; 1:33 is our target range to apply column names
names(descriptivedat[34:79]); # this extracts variable names with indexes that match "std" subset indexes from features
gsub("V","",names(descriptivedat[34:79])); # this strips the "V" from the names; we have character class
f <- as.numeric(gsub("V","",names(descriptivedat[34:79]))); # this converts characters to numeric data class
length(intersect(f,g)); # This should match the length of g above, if so, we can now add the column names
if (length(g)==length(f)) {
test2 <- descriptivedat[34:79]
names(test2) <- tolower(features[grep("mean",features$V2),][,2])
} else {
warning("The dimensions of the indexes do not match up")
}
# combine the newly renamed columns and placeholder files
descriptivedatfinal <- bind_cols(test,test2,descriptivedat["action"],subject[,2])
subject[,2]
# combine the newly renamed columns and placeholder files
descriptivedatfinal <- bind_cols(test,test2,descriptivedat["action"],subject[,1])
subject
descriptivedat <- bind_cols(test,test2,descriptivedat["action"],subject[,1])
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
rm("descriptivedatfinal")
gsub("mag", "magnitude", descriptivedat)
gsub("mag", "magnitude", descriptivedat,)
descriptivedat[gsub("mag", "magnitude", descriptivedat,)]
gsub("mag", "magnitude", names(descriptivedat),)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
names(descriptivedat) <- gsub("-", "", names(descriptivedat))
names(descriptivedat)
gsub("-", "", names(descriptivedat)[1:10])
gsub("^t", "time", names(descriptivedat)[1:10])
?gsub
gsub("$x", "xdirection", names(descriptivedat))
gsub("$z", "xdirection", names(descriptivedat))
gsub("z$", "xdirection", names(descriptivedat))
gsub("x$", "xdirection", names(descriptivedat))
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
rm("test","test2","X","y","X_train","X_test","y_train","y_test","f","g","meanstddat","dat")
gsub("()", "", names(descriptivedat))
gsub("\(\)", "", names(descriptivedat))
gsub("\\(\\)", "", names(descriptivedat))
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat["action"]
descriptivedat["V1"]
names(descriptivedat["V1"])
names(descriptivedat["V1"]) <- "subject"
names(descriptivedat["V1"])
names(descriptivedat["V1"]) <- subject
names(descriptivedat["V1"])
names(descriptivedat)["V1"]
names(descriptivedat["V1"])
names(d)[81] <- "subject"
names(descriptivedat)[81] <- "subject"
descriptivedat["subject"]
?paste0()
append?
''
?append()
append(1:5,0:1,after=3)
append(descriptivedat$subject,"participant")
append(descriptivedat$subject,"participant",after(length(descriptivedat)))
append(descriptivedat$subject,"participant",after=(length(descriptivedat)))
descriptivedat$subject[1]
paste0(descriptivedat$subject[1],participants)
paste0(descriptivedat$subject[1],"participants")
paste0("participant",descriptivedat$subject[1])
paste0("participant",descriptivedat$subject)
descriptivedat$subject <- paste0("participant",descriptivedat$subject)
descriptivedat$subject
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat
descriptivedat[!"V1"]
descriptivedat[ , -which(names(descriptivedat) %in% "V1"]
descriptivedat["V1"]
descriptivedat[ , -which(names(descriptivedat) %in% "V1"]
descriptivedat[, -which(names(descriptivedat) %in% "V1"]
descriptivedat[ -which(names(descriptivedat) %in% "V1"]
descriptivedat[,-which(names(descriptivedat) %in% "V1"]
descriptivedat$V1 <- NULL
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat
summary(descriptivedat)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
names(descriptivedat)[80:81] <- c("assessedactivity","participatingsubject")
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
View(descriptivedat)
paste0("participant",descriptivedat$subject[1])
paste0(descriptivedat$subject[1],"participants")
paste0(descriptivedat$subject,"participants")
descriptivedat$participatingsubject
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat$subject
descriptivedat$participatingsubject
subject
paste0("participant",subject$V1)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat$participatingsubject
mean(descriptivedat)
mean(descriptivedat[1:81])
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
descriptivedat$participatingsubject
names(descriptivedat)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
names(descriptivedat)
mean(descriptivedat$NumberofParticipatingSubject)
mean(descriptivedat)
mean(descriptivedat[1:81])
descriptivedat$NumberofParticipatingSubject
typeof(descriptivedat$NumberofParticipatingSubject)
summarize(descriptivedat,pm25=mean(descriptivedat))
summarize(descriptivedat,pm25=mean(descriptivedat[1:18]))
descriptivedat[1:18]
?summarize
summary(descriptivedat).colMeans()
summary(descriptivedat)
summary(descriptivedat)[1]
summary(descriptivedat)[2]
summary(descriptivedat)[2,2]
summary(descriptivedat)[2]
summary(descriptivedat)[4,1:81]
summarize(descriptivedat,summary(descriptivedat)[4,1:81])
summarize(descriptivedat,group_by(subject))
View(summarize(descriptivedat,group_by(subject)))
?group_by
View(group_by(descriptivedat,AssessedActivity,NumberofParticipatingSubject))
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped, mean=mean(value))
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped, mean=summary(descriptivedat)[4,1:81]
""
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped, mean=summary(descriptivedat)[4,1:81])
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped, mean= mean(descriptivedat)
)
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped, mean= mean(descriptivedat[1:79]))
grouped <- group_by(descriptivedat, NumberofParticipatingSubject, AssessedActivity)
summarise(grouped,summary(descriptivedat)[4,1:81]
)
mean(descriptivedat[1:81])
mean(descriptivedat)
colMeans(descriptivedat)
dim(UCBAdmissions)
UCBAdmissions
typeof(UCBAdmissions
)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
colMeans(x, na.rm = TRUE)
descriptivedat
descriptivedat[1:79]
colMeans(descriptivedat[1:79],na.rm = TRUE)
summarise(grouped, mean= colMeans(descriptivedat[1:79],na.rm = TRUE))
summarise(grouped, colMeans(descriptivedat[1:79],na.rm = TRUE))
summarise(grouped, mean= descriptivedat$FrequencyBodyGyroscopeMagnitudeMean)
summarise(grouped, mean= mean(descriptivedat$FrequencyBodyGyroscopeMagnitudeMean))
tidydata <- summarise(grouped, mean= mean(descriptivedat$FrequencyBodyGyroscopeMagnitudeMean))
summary(descriptivedat)[4,1:81]
View(summary(descriptivedat)[4,1:81])
colMeans(descriptivedat,dims = 79)
colMeans(descriptivedat,dims = 1:79)
?colMeans
colMeans(descriptivedat)
colMeans(descriptivedat[1:79])
descriptivedat %>% group_by(NumberofParticipatingSubject, AssessedActivity) %>% summarise_each(funs(mean))
View(descriptivedat %>% group_by(NumberofParticipatingSubject, AssessedActivity) %>% summarise_each(funs(mean)))
?funs
descriptivedat %>% group_by(NumberofParticipatingSubject, AssessedActivity) %>% summarise_each(funs(mean,"mean",mean(.,na.rm=TRUE)))
View(descriptivedat %>% group_by(NumberofParticipatingSubject, AssessedActivity) %>% summarise_each(funs(mean,"mean",mean(.,na.rm=TRUE))))
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
rm(list=ls())
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
View(X_train)
View(descriptivedat)
View(tidydata)
?write.table
source('~/projects/datasciencecoursera/cleaningdata/courseproject/run_analysis.R')
setwd("~/projects/datasciencecoursera/cleaningdata/courseproject/")
dir()
title: "CodeBook for Human Activity Recognition Using Smartphones Dataset "tidying" "
called is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
title: "CodeBook for Human Activity Recognition Using Smartphones Dataset tidying "
title: "CodeBook for Human Activity Recognition Using Smartphones Dataset tidying"
title: "CodeBook for Human Activity Recognition Using Smartphones Dataset"
This document describes the variables, the data, and any transformations or work performed to clean up the data from the Human Activity Recognition Using Smartphones Dataset (Version 1.0). called is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
This document describes the variables, the data, and any transformations performed on the data.  alled is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
title: "CodeBook"
author: "Linwood Creekmore III"
date: "December 25, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
This code book describes the variables, the data, and any transformations or work performed to clean up the Version 1.0 Human Activity Recognition Using Smartphones Dataset.  data is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
dir()
This project focused on "tidying" or structuring the Human Activity Recognition Using Smartphones Dataset (HAR Dataset) to facilitate analysis. The HAR dataset is a multivariate, time series dataset built from the recordings of 30 subjects performing activities of daily living (ADL) while carrying a waist-mounted smartphone with embedded inertial sensors.
names(descriptivedat)
typeof(names(descriptivedat))
View(names(descriptivedat))
sample <- names(descriptivedat)
table(names(descriptivedat), names(features))
table(names(descriptivedat))
names(meanstddat)
orig <- bind_cols(test,test2,descriptivedat["action"],subject[,1])
dat[grep("std",features$V2)]
names(test)
names(test),names(test2)
c(names(test),names(test2))
(features[grep("std",features$V2),][,2])
c((features[grep("std",features$V2),][,2]),(features[grep("mean",features$V2),][,2]))
(features[grep("mean",features$V2),][,2])
(features[grep("std",features$V2),][,2])
print(c((features[grep("std",features$V2),][,2]),(features[grep("mean",features$V2),][,2])))
(features[grep("std",features$V2),][,2])
getwd()
y_test
print(features[grep("std",features$V2),][,2])
print(features[grep("mean",features$V2),][,2])
[1] tBodyAcc-std()-X           tBodyAcc-std()-Y           tBodyAcc-std()-Z
[4] tGravityAcc-std()-X        tGravityAcc-std()-Y        tGravityAcc-std()-Z
[7] tBodyAccJerk-std()-X       tBodyAccJerk-std()-Y       tBodyAccJerk-std()-Z
[10] tBodyGyro-std()-X          tBodyGyro-std()-Y          tBodyGyro-std()-Z
[13] tBodyGyroJerk-std()-X      tBodyGyroJerk-std()-Y      tBodyGyroJerk-std()-Z
[16] tBodyAccMag-std()          tGravityAccMag-std()       tBodyAccJerkMag-std()
[19] tBodyGyroMag-std()         tBodyGyroJerkMag-std()     fBodyAcc-std()-X
[22] fBodyAcc-std()-Y           fBodyAcc-std()-Z           fBodyAccJerk-std()-X
[25] fBodyAccJerk-std()-Y       fBodyAccJerk-std()-Z       fBodyGyro-std()-X
[28] fBodyGyro-std()-Y          fBodyGyro-std()-Z          fBodyAccMag-std()
[31] fBodyBodyAccJerkMag-std()  fBodyBodyGyroMag-std()     fBodyBodyGyroJerkMag-std()
?bind_rows
?ifelse
names(descriptivedat)
